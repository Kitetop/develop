pipeline {
    agent any
    stages {
        stage('Build') {
            steps {
                echo 'Building...'
				script {
					GIT_COMMIT_EMAIL = sh (
                    	script: "git --no-pager show -s --format='%ae' $GIT_COMMIT",
                   		returnStdout: true).trim()
					GIT_COMMIT_MESSAGE = sh (
						script: "git --no-pager show -s --format='%s' $GIT_COMMIT",
                        returnStdout: true).trim()
				}
                sh 'cd mysql && docker build -f Dockerfile -t test:latest .'
                sh 'docker run -d -p 3306:3306 --name test test'
            }
        }

        stage('Test') {
            steps {
                echo 'Testing...'
                sh 'mvn clean package --file pom.xml'
            }
        }
      }
      post {
          always {
             echo 'Clear....'
             sh 'docker rm test -f && docker rmi test'
          }
		  success {
			script {
				mail(true)
			}
			jacoco deltaLineCoverage: '85', 
			maximumLineCoverage: '90', 
			minimumLineCoverage: '80'
		  }
		  failure {
			  script {
				  mail(false)
			  }
		  }
      }
}
def getMailBody(flage) {
	if(flage) {
		context = readFile file:'SuccessTemplate.html', encoding: 'UTF-8'
	} else {
		context = readFile file:'FailureTemplate.html', encoding: 'UTF-8'
	}
	return context
}
def mail(flage) {
	emailext body: getMailBody(flage),
	subject: '[Jenkins Build Notification] ${PROJECT_NAME} - Build # ${BUILD_NUMBER} - ${BUILD_STATUS}!', 
	to: "${GIT_COMMIT_EMAIL}", 
	from: 'Master' 
}
